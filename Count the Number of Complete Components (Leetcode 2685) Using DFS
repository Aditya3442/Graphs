class Solution {
    public void dfs(int index , boolean[] visited , int[] arr , List<List<Integer>> adj) {
        visited[index] = true;
        arr[0]++;
        arr[1] += adj.get(index).size();

        for(int x : adj.get(index)) {
            if(!visited[x]) {
                dfs(x , visited , arr , adj);
            }
        }
    }
    public int countCompleteComponents(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for(int i = 0; i < edges.length; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        boolean[] visited = new boolean[n];
        int count = 0;
        for(int i = 0; i < n; i++) {
           if(!visited[i]) {
               int arr[] = new int[2];
               dfs(i , visited , arr , adj);
               if(arr[0] * (arr[0] - 1) == arr[1])
                  count++;
           }            
        }
        return count;
    }
}
