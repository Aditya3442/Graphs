class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(ArrayList<ArrayList<Integer>> adj) {
        // code here
        int n = adj.size();
        int inDegree[] = new int[n];
        for(int i = 0; i < n; i++) {
            for(int x : adj.get(i)) {
                inDegree[x]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < n; i++) {
            if(inDegree[i] == 0)
               q.offer(i);
        }
        ArrayList<Integer> list = new ArrayList<>();
        while(!q.isEmpty()) {
            int x = q.poll();
            list.add(x);
            
            for(int index : adj.get(x)) {
                inDegree[index]--;
                if(inDegree[index] == 0)
                  q.offer(index);
            }
        }
        return list.size() < n;
    }
}
