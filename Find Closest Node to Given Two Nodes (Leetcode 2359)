class Solution {
    public void dfs(int node , int dist , int distance[] , boolean visited[] , int edges[]) {
       if(node == -1)
         return;
       visited[node] = true;
       distance[node] = dist;

       node = edges[node];
       if(node == -1 || !visited[node]) {
        dfs(node , dist + 1 , distance , visited , edges);
       }
    }
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length;
        
        int distanceNode1[] = new int[n];
        Arrays.fill(distanceNode1 , Integer.MAX_VALUE);
        int distance = 0;
        boolean visited[] = new boolean[n];
        dfs(node1 , 0 , distanceNode1 , visited , edges);

        int distanceNode2[] = new int[n];
        Arrays.fill(distanceNode2 , Integer.MAX_VALUE);
        distance = 0;
        visited = new boolean[n];
        dfs(node2 , 0 , distanceNode2 , visited , edges);

        int mini = Integer.MAX_VALUE;
        int index = -1;
        for(int i = 0; i < n; i++) {
            if(Math.max(distanceNode1[i] , distanceNode2[i]) < mini) {
                mini = Math.min(mini , Math.max(distanceNode1[i] , distanceNode2[i]));
                index = i;
            }            
        }
        return index;
    }
}
