class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            list.add(new ArrayList<>());
        }
        for(int i = 0; i < n; i++) {
            for(int x : graph[i]) {
                list.get(x).add(i);
            }
        }
        int inDegree[] = new int[n];
        for(int i = 0; i < n; i++) {
            for(int x : list.get(i)) {
                inDegree[x]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < n; i++) {
            if(inDegree[i] == 0)
               q.offer(i);
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while(!q.isEmpty()) {
            int x = q.poll();
            ans.add(x);
            for(int index : list.get(x)) {
                inDegree[index]--;
                if(inDegree[index] == 0)
                   q.offer(index);
            }
        }
        Collections.sort(ans);
        return ans;
    }
}
