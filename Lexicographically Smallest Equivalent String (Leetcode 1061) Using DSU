class Solution {
    List<Integer> parent = new ArrayList<>();

    public int findParent(int node) {
        if(node == parent.get(node)) {
            return node;
        }
        int x = findParent(parent.get(node));
        parent.set(node , x);
        return x;

    }
    public void unionByLexo(int u , int v) {
        int pu = findParent(u);
        int pv = findParent(v);

        if(pu == pv)
          return;
        if(pu < pv) {
            parent.set(pv , pu);
        }
        else {
            parent.set(pu , pv);
        }
    }

    public String smallestEquivalentString(String s1, String s2, String baseStr) {
        for(int i = 0; i < 26; i++) {
            parent.add(i);
        }
        int n = s1.length();
        for(int i = 0; i < n; i++) {
            unionByLexo(s1.charAt(i) - 'a' , s2.charAt(i) - 'a');
        }

        String ans = "";
        for(int i = 0; i < baseStr.length(); i++) {
            int x = findParent(baseStr.charAt(i) - 'a');
            char ch = (char)(x + 'a');
            ans += ch;
        }
        return ans;
    }
}
