class Solution {
    int maxi = 1;
    int[][] directions = {{-1 , 0} , {0 , 1} , {1 , 0} , {0 , -1}};
    List<Integer> size = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
     
    public int parent(int node) {
        if(node == parent.get(node)) {
            return node;
        }
        int x = parent(parent.get(node));
        parent.set(node , x);
        return x;
    }
    public void unionBySize(int u , int v) {
        int pu = parent(u);
        int pv = parent(v);

        if(pu == pv) {
            return;
        }

        if(size.get(pu) >= size.get(pv)) {
            parent.set(pv , pu);
            int s = size.get(pu) + size.get(pv) ;
            size.set(pu , s);
            maxi = Math.max(maxi , s);
        }
        else {
            parent.set(pu , pv);
            int s = size.get(pu) + size.get(pv);
            size.set(pv , s);
            maxi = Math.max(maxi , s);
        }
    }
    public int largestIsland(int[][] grid) {

        int rows = grid.length;
        int cols = grid[0].length;

        for(int i = 0; i < rows * cols; i++) {
            size.add(1);
            parent.add(i);
        }

        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(grid[i][j] == 1) {
                    for(int[] dir : directions) {
                        int newRow = i + dir[0];
                        int newCol = j + dir[1];
                        if(newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) {
                            unionBySize(i * cols + j , newRow * cols + newCol);
                        }
                    }
                }
            }
        }

        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(grid[i][j] == 0) {
                    int count = 1;
                    Set<Integer> set = new HashSet<>();
                    for(int dir[] : directions) {
                        int newRow = i + dir[0];
                        int newCol = j + dir[1];
                        if(newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) {
                            int p = parent(newRow * cols + newCol);
                            set.add(p);
                        }
                    }
                    for(int x : set) {
                        count += size.get(x);
                    }
                    maxi = Math.max(maxi , count);
                }
            }
        }
        return maxi;
    }
}
