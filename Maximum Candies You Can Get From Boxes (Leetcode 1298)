class Solution {
    Set<Integer> set = new HashSet<>();
    public int dfs(int box , boolean[] visited , int[] status, int[] candies, int[][] keys, int[][] containedBoxes) {
        if(visited[box])
          return 0;
        if(status[box] == 0) {
            set.add(box);
            return 0;
        }
        visited[box] = true;
        int count = candies[box];
        for(int x : containedBoxes[box]) {
            if(!visited[x]) {
                count += dfs(x , visited , status, candies, keys, containedBoxes);
            }
        }
        for(int x : keys[box]) {
            status[x] = 1;
            if(set.contains(x)) {
                if(!visited[x]) {
                count += dfs(x , visited , status, candies, keys, containedBoxes);
                }
            }
        }
        return count;
    }
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int n = status.length;
        boolean[] visited = new boolean[n];
        int ans = 0;
        for(int x : initialBoxes) {
            if(!visited[x]) {
                ans += dfs(x , visited , status, candies, keys, containedBoxes);
            }
        }
        return ans;
    }
}
