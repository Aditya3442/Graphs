class Solution {
    int directions[][] = {{-1 , 0} , {0 , 1} , {1 , 0} , {0 , -1}};
    public int[] maxPoints(int[][] grid, int[] queries) {
        int m = grid.length;
        int n = grid[0].length;

        boolean visited[][] = new boolean[m][n];
        visited[0][0] = true;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a , b) -> a[0] - b[0]);
        pq.offer(new int[]{grid[0][0] , 0 , 0});
        int count = 0;

        int ans[] = new int[queries.length];
        int sortedQueries[][] = new int[queries.length][2];
        for(int i = 0; i < queries.length; i++) {
               sortedQueries[i][0] = queries[i];
               sortedQueries[i][1] = i;
        }
        Arrays.sort(sortedQueries , (a , b) -> a[0] - b[0]);

        for(int i = 0; i < queries.length; i++) {
          int query = sortedQueries[i][0];
          while(!pq.isEmpty() && pq.peek()[0] < query) {
            int arr[] = pq.poll();
            count++;
            for(int dir[] : directions) {
                int newi = arr[1] + dir[0];
                int newj = arr[2] + dir[1];
                if(newi >= 0 && newi < m && newj >= 0 && newj < n && !visited[newi][newj]) {
                    pq.offer(new int[]{grid[newi][newj] , newi , newj});
                    visited[newi][newj] = true;
                }
            }
          }
          ans[sortedQueries[i][1]] = count;
        }
        return ans;
    }
}
