class Pair {
    long distance;
    long node;
    Pair(long distance , long node) {
        this.distance = distance;
        this.node = node;
    }
}
class Solution {
    public int countPaths(int n, int[][] roads) {
        List<List<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++) {
             adj.add(new ArrayList<>());
        }
        for(int i = 0; i < roads.length; i++) {
                long u = (long)roads[i][0];
                long v = (long)roads[i][1];
                long wt = (long)roads[i][2];
                adj.get((int)u).add(new Pair(wt , v));
                adj.get((int)v).add(new Pair(wt , u));
        }

        long[] dist = new long[n];
        for(int i = 0; i < n; i++) {
            dist[i] = Long.MAX_VALUE;
        }
        dist[0] = 0;

        long[] count = new long[n];
        count[0] = 1;

        PriorityQueue<Pair> pq = new PriorityQueue<>((a , b) -> Long.compare(a.distance , b.distance));
        pq.offer(new Pair(0 , 0));

        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            long preDistance = p.distance;
            long preNode = p.node;

            for(Pair pair : adj.get((int)preNode)) {
                long currDistance = pair.distance;
                long currNode = pair.node;

                if(preDistance + currDistance < dist[(int)currNode]) {
                    dist[(int)currNode] = preDistance + currDistance;
                    pq.offer(new Pair(dist[(int)currNode] , currNode));
                    count[(int)currNode] = count[(int)preNode];
                }
                else if(preDistance + currDistance == dist[(int)currNode]) {
                    count[(int)currNode] = (count[(int)currNode] + count[(int)preNode]) % (int)(1e9 + 7);
                }
            }
        }
        return (int)count[n - 1];
    }
}
