class Pair {
    int distance;
    int row;
    int col;
    Pair(int distance , int row , int col) {
        this.distance = distance;
        this.row = row;
        this.col = col;
    }
}
class Solution {
    int directions[][] = {{-1 , 0} , {0 , 1} , {1 , 0}, {0 , -1}};
    public int minimumEffortPath(int[][] heights) {
        int n = heights.length;
        int m = heights[0].length;

        int dist[][] = new int[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                dist[i][j] = Integer.MAX_VALUE;
            }
        }
        dist[0][0] = 0;
        PriorityQueue<Pair> pq = new PriorityQueue<>((a , b) -> a.distance - b.distance);
        pq.offer(new Pair(0 , 0 , 0));
        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            int distance = p.distance;
            int row = p.row;
            int col = p.col;

            if(row == n - 1 && col == m - 1)
              return distance;
            for(int dir[] : directions) {
                int newRow = row + dir[0];
                int newCol = col + dir[1];
                if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && Math.max(distance , Math.abs(heights[row][col] - heights[newRow][newCol])) < dist[newRow][newCol]) {
                    dist[newRow][newCol] = Math.max(distance , Math.abs(heights[row][col] - heights[newRow][newCol]));
                    pq.offer(new Pair(dist[newRow][newCol] , newRow , newCol));
                }
            }
        }
        return 0;
    }
}
