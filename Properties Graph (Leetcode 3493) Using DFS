class Solution {
    public int check(int arr1[] , int arr2[]) {
        Set<Integer> set = new HashSet<>();
        for(int i : arr1)
            set.add(i);

        int count = 0;
        for(int i : arr2) {
            if(set.contains(i)) {
                count++;
                set.remove(i);
            }
        }
        return count;
    }
    public void dfs(int index , boolean[] visited , List<List<Integer>> adj) {
        visited[index] = true;
        for(int x : adj.get(index)) {
            if(!visited[x]) {
                dfs(x , visited , adj);
            }
        }
    }
    public int numberOfComponents(int[][] properties, int k) {
        int n = properties.length;
        List<List<Integer>> adj = new ArrayList<>();

        for(int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(check(properties[i] , properties[j]) >= k) {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }

        int count = 0;
        boolean visited[] = new boolean[n];
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                dfs(i , visited , adj);
                count++;
            }
        }
        return count;
    }
}
