class Pair {
    int distance;
    int row;
    int col;
    Pair(int distance , int row , int col) {
        this.distance = distance;
        this.row = row;
        this.col = col;
    }
}
class Solution {
    int directions[][] = {{- 1 , -1} , {-1 , 0} , {-1 , +1} , {0 , -1} , {0 , 1} , {1 , -1} , {1 , 0} , {1 , 1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if(grid[0][0] == 1 || grid[n - 1][n - 1] == 1)
           return -1;
        if(n == 1)
           return 1;
        int dist[][] = new int[n][n];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                dist[i][j] = Integer.MAX_VALUE;
            }
        }

        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(0 , 0 , 0));

        while(!q.isEmpty()) {
            Pair p = q.poll();
            int distance = p.distance;
            int row = p.row;
            int col = p.col;
            for(int dir[] : directions) {
                int newRow = row + dir[0];
                int newCol = col + dir[1];
                if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && grid[newRow][newCol] == 0 && dist[newRow][newCol] > distance + 1) {
                    dist[newRow][newCol] = distance + 1;
                    if(newRow == n -1 && newCol == n - 1)
                       return dist[n - 1][n - 1] + 1;
                    q.offer(new Pair(distance + 1 , newRow , newCol));
                }
            }
        }
        return -1;
    }
}
