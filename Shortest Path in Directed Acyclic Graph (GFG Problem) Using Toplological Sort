class Solution {
        public static void toposort(int index , boolean[] visited , Stack<Integer> stk , List<List<int[]>> adj) {
            visited[index] = true;
            for(int[] arr : adj.get(index)) {
                if(!visited[arr[0]]) {
                    toposort(arr[0] , visited , stk , adj);
                }
            }
            stk.push(index);
        }
    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        List<List<int[]>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for(int i = 0; i < edges.length; i++) {
            adj.get(edges[i][0]).add(new int[]{edges[i][1] , edges[i][2]});
        }
        
        Stack<Integer> stk = new Stack<>();
        boolean[] visited = new boolean[V];
        
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                toposort(i , visited , stk , adj);
            }
        }
        
        int dist[] = new int[V];
        Arrays.fill(dist , (int)(1e9 + 7));
        
        dist[0] = 0;
        while(!stk.isEmpty()) {
            int x = stk.pop();
            
            for(int arr[] : adj.get(x)) {
                int v = arr[0];
                int wt = arr[1];
                
                if(wt + dist[x] < dist[v]) {
                    dist[v] = wt + dist[x];
                }
            }
        }
        
        for(int i = 0; i < V; i++) {
            if(dist[i] == (int)(1e9 + 7))
                dist[i] = -1;
        }
        return dist;
    }
}
