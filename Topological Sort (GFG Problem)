class Solution {
    public static void dfs(int index , boolean[] visited , Stack<Integer> stk , ArrayList<ArrayList<Integer>> adj) {
        visited[index] = true;
        for(int x : adj.get(index)) {
            if(!visited[x]) {
                dfs(x , visited , stk , adj);
            }
        }
        stk.push(index);
    }
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        int n = adj.size();
        boolean[] visited = new boolean[n];
        Stack<Integer> stk = new Stack<>();
        for(int i = 0; i < n; i++) {
            if(!visited[i])
              dfs(i , visited , stk , adj);
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while(!stk.isEmpty()) {
            ans.add(stk.pop());
        }
        return ans;
    }
}
